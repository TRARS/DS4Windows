<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:DS4WinWPF.UI.Control.CustomStyleEx.ComboBoxEx">

    <local:cComboBox_converter_content2string x:Key="cComboBox_converter_content2string"/>

    <!--MouseOverColor-->
    <SolidColorBrush x:Key="MouseOverColor" Color="#80DC143C"/>

    <!--ComboBoxTextBox-->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#454851"/>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border Focusable="False" Background="{TemplateBinding Background}">
            <Grid>
                <Rectangle             Grid.Column="0" Grid.ColumnSpan="2" Fill="White" Opacity="0.3" RadiusX="2" RadiusY="2" />
                <Rectangle x:Name="bk" Grid.Column="0" Grid.ColumnSpan="2" Fill="DarkGray" Opacity="0.1" RadiusX="2" RadiusY="2" />

                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                              VerticalAlignment="Center" Margin="4,0,0,0" Opacity="0">
                </ScrollViewer>
            </Grid>
        </Border>
    </ControlTemplate>
    <!--ToggleButtonControlTemplate1-->
    <ControlTemplate x:Key="ToggleButtonControlTemplate1" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.1" To="Normal"/>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="BlueRect">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#FFDCDFE1"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="BlueRect">
                                <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#FF5D94F0"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed"/>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="GlowRect">
                                <EasingColorKeyFrame KeyTime="0" Value="#FF919191"/>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>


            <Rectangle x:Name="BlueRect" Grid.Column="1" Fill="#FF236BE1" HorizontalAlignment="Left" Height="21.24" RadiusY="0" RadiusX="0" VerticalAlignment="Top" Width="20" Opacity="0"/>
            <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="GlowRect" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="0" RadiusY="0" Stroke="Black">
                <Rectangle.Fill>
                    <RadialGradientBrush Center="0.5,0.98" GradientOrigin="0.5,0.98">
                        <GradientStop Color="#00FFF7F7"/>
                        <GradientStop Offset="1" Color="#00AE9CFF"/>
                    </RadialGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
            <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="#444" Data="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true"/>
            <Trigger Property="IsChecked" Value="true"/>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--ComboBox-->
    <Style x:Key="cComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="Wheat" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="contentGrid">
                        <!--背景色-->
                        <Rectangle             Grid.Column="0" Grid.ColumnSpan="2" Fill="#414141" Opacity="1" RadiusX="2.5" RadiusY="2.5" />
                        <Rectangle x:Name="bk" Grid.Column="0" Grid.ColumnSpan="2" Fill="{StaticResource MouseOverColor}" Opacity="0" RadiusX="2.5" RadiusY="2.5" />

                        <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                        <ToggleButton  Opacity="0.01" Grid.Column="2" Template="{StaticResource ToggleButtonControlTemplate1}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                        <!--<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>-->
                        <TextBlock x:Name="contentSite" 
                                   HorizontalAlignment="Left" Margin="5,3,23,3" 
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding SelectionBoxItem, Converter={StaticResource cComboBox_converter_content2string}}" 
                                   Foreground="{TemplateBinding Foreground}" 
                                   IsHitTestVisible="False"/>

                        <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                        <TextBox Visibility="Hidden" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                        <Path x:Name="DropDownArrow"
                              Data="M786.135091 1024L0 237.864909 237.864909 0l548.270182 546.583196L1332.718287 0l237.864909 237.864909-784.448105 786.135091z"
                              Margin="4" Stretch="Uniform" VerticalAlignment="Center" HorizontalAlignment="Right"
                              Width="12" Height="{Binding Width,RelativeSource={RelativeSource Self}}"
                              Fill="{TemplateBinding Foreground}" Opacity="0.85" IsHitTestVisible="False">
                        </Path>



                        <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder" Background="{StaticResource WindowBackgroundBrush}" 
                                        BorderBrush="LightGray"
                                        BorderThickness="1" 
                                        CornerRadius="2.5"
                                        Opacity="1"/>
                                <ScrollViewer Margin="3,5,3,5" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                    <!-- The StackPanel is used to display the children by setting IsItemsHost to be True -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>

                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- This forces the DropDown to have a minimum size if it is empty -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>-->
                            <Setter Property="Opacity" Value="0.25" TargetName="contentGrid"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <!--<Setter Property="CornerRadius" Value="0" TargetName="DropDownBorder"/>-->
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="contentSite"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="bk" Value="0.85"/>
                            <Setter Property="Foreground" TargetName="contentSite" Value="White"/>
                            <Setter Property="Fill" TargetName="DropDownArrow" Value="White"/>
                            <!--<Setter Property="Effect" TargetName="DropDownArrow">
                                <Setter.Value>
                                    <DropShadowEffect Color="White" ShadowDepth="0" BlurRadius="1" Direction="0"/>
                                </Setter.Value>
                            </Setter>-->
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Opacity" TargetName="bk" Value="0.8"/>
                        </Trigger>-->

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ZeroNull"/>
                                <Condition Binding="{Binding SelectedIndex, RelativeSource={RelativeSource Self}}" Value="0"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.35"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="ZeroNull"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="1.0"/>
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--ComboBoxItem改背景色-->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Grid Margin="0,1,0,0">
                                    <Border x:Name="ItemBackground" Background="#80000000"
                                            BorderBrush="#80000000"
                                            BorderThickness="1" 
                                            CornerRadius="2"
                                            Padding="3,0,3,1">
                                        <!--<ContentPresenter Margin="2,0,2,0"/>-->
                                        <TextBlock x:Name="contentSite"
                                                   HorizontalAlignment="Left" 
                                                   VerticalAlignment="Center"
                                                   Text="{TemplateBinding Content, Converter={StaticResource cComboBox_converter_content2string}}" 
                                                   Foreground="{TemplateBinding Foreground}" 
                                                   IsHitTestVisible="False"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#80FFFFFF" TargetName="ItemBackground"/>
                                        <Setter Property="BorderBrush" Value="White" TargetName="ItemBackground"/>
                                        <Setter Property="Foreground" Value="Black" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Foreground" Value="Crimson" />
                                    </Trigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Effect" TargetName="contentSite">
                                            <Setter.Value>
                                                <DropShadowEffect BlurRadius="0" ShadowDepth="1"/>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <!--<EventSetter Event="PreviewMouseWheel" Handler="ComboBox_PreviewMouseWheel"/>-->
    </Style>
</ResourceDictionary>